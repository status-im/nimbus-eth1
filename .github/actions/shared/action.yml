# Nimbus
# Copyright (c) 2025 Status Research & Development GmbH
# Licensed under either of
#  * Apache License, version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
#    http://www.apache.org/licenses/LICENSE-2.0)
#  * MIT license ([LICENSE-MIT](LICENSE-MIT) or
#    http://opensource.org/licenses/MIT)
# at your option. This file may not be copied, modified, or distributed except
# according to those terms.

name: 'Shared action'
description: 'Nimbus shared action'
inputs:
  llvm-mingw:
    description: 'Enable llvm-mingw cache'
    required: false
    default: false

  nim-cache:
    description: 'Enable nim compiler prebuilt binary cache'
    required: false
    default: true

  rocksdb-cache:
    description: 'Enable rocksdb prebuilt binary cache'
    required: false
    default: false

  eest-cache:
    description: 'Enable EEST test vectors cache'
    required: false
    default: false

outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  steps:
    - name: Random Number Generator
      id: random-number-generator
      run: echo "random-number=$(echo $RANDOM)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Derive environment variables
      shell: bash
      run: |
        if [[ '${{ matrix.cpu }}' == 'amd64' ]]; then
          PLATFORM=x64
          GOARCH=amd64
        elif [[ '${{ matrix.cpu }}' == 'arm64' ]]; then
          PLATFORM=arm64
          GOARCH=arm64
        else
          PLATFORM=x86
          GOARCH=386
        fi
        echo "PLATFORM=${PLATFORM}" >> $GITHUB_ENV
        echo "GOARCH=${GOARCH}" >> $GITHUB_ENV

        ncpu=''
        case '${{ runner.os }}' in
        'Linux')
          ncpu=$(nproc)
          echo "Number of cores: ${ncpu}"
          echo "$(grep MemTotal /proc/meminfo)"
          echo -e "Partition sizes:\n$(df -k -h .)"
          ;;
        'macOS')
          ncpu=$(sysctl -n hw.ncpu)
          hwmemsize=$(sysctl -n hw.memsize)
          ramsize=$(expr $hwmemsize / $((1024**3)))
          echo "Number of cores: ${ncpu}"
          echo "Physical memory: ${ramsize} GB"
          echo -e "Partition sizes:\n$(df -k -h .)"
          ;;
        'Windows')
          ncpu=${NUMBER_OF_PROCESSORS}
          CD=${PWD:1:1}
          echo "Number of cores: ${NUMBER_OF_PROCESSORS}"
          echo "Physical memory: $(wmic ComputerSystem get TotalPhysicalMemory)"
          echo -e "Partition sizes:\n$(wmic logicaldisk get name,size,freespace | grep -e "${CD^}" -e "FreeSpace")"
          ;;
        esac
        [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
        echo "ncpu=${ncpu}" >> $GITHUB_ENV

    - name: Install build dependencies (Macos)
      # Some home brew modules were reported missing
      if: runner.os == 'Macos'
      shell: bash
      run: |
        HOMEBREW_NO_INSTALL_CLEANUP=1 brew install gnu-getopt
        brew link --force gnu-getopt

    - name: Restore llvm-mingw (Windows) from cache
      if: runner.os == 'Windows' && inputs.llvm-mingw == 'true'
      id: windows-mingw-cache
      uses: actions/cache@v4
      with:
        path: external/mingw-${{ matrix.cpu }}
        key: 'mingw-llvm-21-${{ matrix.cpu }}'

    - name: Install llvm-mingw dependency (Windows)
      if: >
        steps.windows-mingw-cache.outputs.cache-hit != 'true' &&
        runner.os == 'Windows' && inputs.llvm-mingw == 'true'
      shell: bash
      run: |
        mkdir -p external
        LLVM_VERSION="20250730"
        MINGW_BASE="https://github.com/mstorsjo/llvm-mingw/releases/download/$LLVM_VERSION"
        if [[ '${{ matrix.cpu }}' == 'amd64' ]]; then
          MINGW_URL="$MINGW_BASE/llvm-mingw-$LLVM_VERSION-ucrt-x86_64.zip"
          ARCH=64
        else
          MINGW_URL="$MINGW_BASE/llvm-mingw-$LLVM_VERSION-ucrt-i686.zip"
          ARCH=32
        fi
        curl -L "$MINGW_URL" -o "external/mingw-${{ matrix.cpu }}.zip"
        7z x -y "external/mingw-${{ matrix.cpu }}.zip" -oexternal/mingw-${{ matrix.cpu }}/
        mv external/mingw-${{ matrix.cpu }}/**/* ./external/mingw-${{ matrix.cpu }}

    - name: Path to cached dependencies (Windows)
      if: >
        runner.os == 'Windows' && inputs.llvm-mingw == 'true'
      shell: bash
      run: |
        echo '${{ github.workspace }}'"/external/mingw-${{ matrix.cpu }}/bin" >> $GITHUB_PATH

    - name: Get latest nimbus-build-system commit hash
      if: inputs.nim-cache == 'true'
      id: versions
      shell: bash
      run: |
        getHash() {
          git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
        }
        nbsHash=$(getHash status-im/nimbus-build-system)
        echo "nimbus_build_system=$nbsHash" >> $GITHUB_OUTPUT

    - name: Restore prebuilt Nim from cache
      if: inputs.nim-cache == 'true'
      id: nim-cache
      uses: actions/cache@v4
      with:
        path: NimBinCache
        key: 'nim-${{ matrix.os }}-${{ matrix.cpu }}-${{ steps.versions.outputs.nimbus_build_system }}'

    - name: Build Nim and Nimbus-eth1 dependencies
      if: inputs.nim-cache == 'true'
      shell: bash
      run: |
        make -j${ncpu} ARCH_OVERRIDE=${PLATFORM} CI_CACHE=NimBinCache init

    - name: Get latest nim-rocksdb commit hash
      if: inputs.rocksdb-cache == 'true'
      id: rocksdb-versions
      shell: bash
      run: |
        getHash() {
          git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
        }
        rocksHash=$(getHash status-im/nim-rocksdb)
        echo "nim_rocksdb=$rocksHash" >> $GITHUB_OUTPUT

    - name: Restore prebuilt rocksdb from cache
      if: inputs.rocksdb-cache == 'true'
      id: rocksdb-cache
      uses: actions/cache@v4
      with:
        path: RocksBinCache
        key: 'rocks-${{ matrix.os }}-${{ matrix.cpu }}-${{ steps.rocksdb-versions.outputs.nim_rocksdb }}'

    - name: Restore EEST test vectors from cache
      if: inputs.eest-cache == 'true'
      uses: actions/cache@v4
      with:
        path: |
          tests/fixtures/eest_static
          tests/fixtures/eest_stable
          tests/fixtures/eest_develop
          tests/fixtures/eest_devnet
        # EEST release version contained in eest_ci_cache.sh.
        # Each time we bump EEST version, it should invalidate the cache too.
        key: eest-${{ hashFiles('scripts/eest_ci_cache.sh') }}