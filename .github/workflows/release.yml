# Nimbus
# Copyright (c) 2020-2025 Status Research & Development GmbH
# Licensed under either of
#  * Apache License, version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
#    http://www.apache.org/licenses/LICENSE-2.0)
#  * MIT license ([LICENSE-MIT](LICENSE-MIT) or
#    http://opensource.org/licenses/MIT)
# at your option. This file may not be copied, modified, or distributed except
# according to those terms.

on:
  push:
    tags:
    - 'v*' # "v1.2.3"

  workflow_dispatch:

name: Upload Release Asset

jobs:
  matrix_config:
    uses: ./.github/workflows/matrix_config.yml

  build:
    needs: matrix_config

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    name: '${{ matrix.os }}-${{ matrix.cpu }}'
    runs-on: ubuntu-latest

    steps:
      - name: Install packages
        if: matrix.os == 'linux' && matrix.cpu == 'arm64'
        env:
          DEBIAN_FRONTEND: "noninteractive"
          TZ: "Etc/UTC"
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install binfmt-support qemu-user-static

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Extract branch name
        id: extract_branch
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build project
        id: make_dist
        run: |
          make dist-${{ matrix.os }}-${{ matrix.cpu }}

          cd dist
          ARCHIVE=$(echo *.tar.gz)
          ARCHIVE_DIR=$(basename -s .tar.gz -- *.tar.gz)
          tar -xzf "${ARCHIVE}"

          # Expose original archive/dir names if you still want them later
          echo "archive=${ARCHIVE}" >> $GITHUB_OUTPUT
          echo "archive_dir=${ARCHIVE_DIR}" >> $GITHUB_OUTPUT

          # Compose per-component tarball names
          REFNAME="${{ github.ref }}"
          TAG="${REFNAME#refs/tags/}"
          OS="${{ matrix.os }}"
          CPU="${{ matrix.cpu }}"

          NEC_TAR="nimbus_execution_client_${OS}_${CPU}_${TAG}.tar.gz"
          NVP_TAR="nimbus_verified_proxy_${OS}_${CPU}_${TAG}.tar.gz"

          # Pack only the relevant binaries (and their checksums) from build/
          # Add additional files (LICENSE, README, configs) if desired with extra -C args.
          tar -czf "${NEC_TAR}" -C "${ARCHIVE_DIR}/build" \
            nimbus_execution_client nimbus_execution_client.sha512sum

          tar -czf "${NVP_TAR}" -C "${ARCHIVE_DIR}/build" \
            nimbus_verified_proxy nimbus_verified_proxy.sha512sum

          # Optional: generate sha512 for the tarballs themselves (not required by GH)
          sha512sum "${NEC_TAR}" > "${NEC_TAR}.sha512sum"
          sha512sum "${NVP_TAR}" > "${NVP_TAR}.sha512sum"

          echo "nec_tar=${NEC_TAR}" >> $GITHUB_OUTPUT
          echo "nvp_tar=${NVP_TAR}" >> $GITHUB_OUTPUT

      - name: Upload execution client tarball artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.cpu }}-execution
          path: |
            ./dist/${{ steps.make_dist.outputs.nec_tar }}
            ./dist/${{ steps.make_dist.outputs.nec_tar }}.sha512sum
          retention-days: 2

      - name: Upload verified proxy tarball artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.cpu }}-proxy
          path: |
            ./dist/${{ steps.make_dist.outputs.nvp_tar }}
            ./dist/${{ steps.make_dist.outputs.nvp_tar }}.sha512sum
          retention-days: 2

      - name: Login to Docker Hub
        # This step runs only if the tag starts with 'v'
        if: matrix.os == 'linux' && startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push a Docker image for end users
        # This step runs only if the tag starts with 'v'
        if: matrix.os == 'linux' && startsWith(github.ref, 'refs/tags/v')
        run: |
          cd dist
          tar -xzf ${{ steps.make_dist.outputs.archive }}
          mv ${{ steps.make_dist.outputs.archive_dir }} ../docker/dist/binaries/nimbus-eth1
          cd ../docker/dist/binaries
          REFNAME="${{ github.ref }}"
          TAG="${REFNAME#refs/tags/}"
          DOCKER_BUILDKIT=1 docker build -f Dockerfile.${{ matrix.os }}-${{ matrix.cpu }} -t statusim/nimbus-eth1:${{ matrix.os }}-${{ matrix.cpu }}-${TAG} -t statusim/nimbus-eth1:${{ matrix.os }}-${{ matrix.cpu }}-latest .
          docker push statusim/nimbus-eth1:${{ matrix.os }}-${{ matrix.cpu }}-${TAG}
          docker push statusim/nimbus-eth1:${{ matrix.os }}-${{ matrix.cpu }}-latest

  prepare-release:
    name: Prepare release draft
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          cat > release_notes.md <<EOF
          ## Notes

          ## SHA512 checksums

          ### Nimbus Execution Client

          \`\`\`text
          EOF
          echo '# Linux AMD64' >> release_notes.md
          cat linux-amd64-checksum/* >> release_notes.md
          echo '# Linux ARM64' >> release_notes.md
          cat linux-arm64-checksum/* >> release_notes.md
          echo '# Windows AMD64' >> release_notes.md
          cat windows-amd64-checksum/* >> release_notes.md
          echo '# macOS ARM64' >> release_notes.md
          cat macos-arm64-checksum/* >> release_notes.md
          echo '```' >> release_notes.md
          echo '' >> release_notes.md
          echo '### Nimbus Verified Proxy' >> release_notes.md
          echo '' >> release_notes.md
          echo '```' >> release_notes.md
          echo '# Linux AMD64' >> release_notes.md
          cat proxy-linux-amd64-checksum/* >> release_notes.md
          echo '# Linux ARM64' >> release_notes.md
          cat proxy-linux-arm64-checksum/* >> release_notes.md
          echo '# Windows AMD64' >> release_notes.md
          cat proxy-windows-amd64-checksum/* >> release_notes.md
          echo '# macOS ARM64' >> release_notes.md
          cat proxy-macos-arm64-checksum/* >> release_notes.md
          echo '```' >> release_notes.md

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          name: 'Release build ("${{ steps.extract_branch.outputs.tag_name }}")'
          body_path: release_notes.md
          files: |
            linux-amd64-execution/*
            linux-amd64-proxy/*
            linux-arm64-execution/*
            linux-arm64-proxy/*
            windows-amd64-execution/*
            windows-amd64-proxy/*
            macos-arm64-execution/*
            macos-arm64-proxy/*

      - name: Delete artefacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            linux-amd64-archive
            linux-amd64-checksum
            linux-arm64-archive
            linux-arm64-checksum
            windows-amd64-archive
            windows-amd64-checksum
            macos-arm64-archive
            macos-arm64-checksum
            proxy-linux-amd64-checksum
            proxy-linux-arm64-checksum
            proxy-windows-amd64-checksum
            proxy-macos-arm64-checksum

      #- name: Login to Docker Hub
      #  uses: docker/login-action@v3
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}
      #
      #- name: Build multi-arch Docker image
      #  run: |
      #    REFNAME="${{ github.ref }}"
      #    TAG="${REFNAME#refs/tags/}"
      #    docker manifest create \
      #      statusim/nimbus-eth1:multiarch-${TAG} \
      #      --amend statusim/nimbus-eth1:amd64-${TAG} \
      #      --amend statusim/nimbus-eth1:arm64-${TAG}
      #    docker manifest push statusim/nimbus-eth1:multiarch-${TAG}
      #    docker manifest create \
      #      statusim/nimbus-eth1:multiarch-latest \
      #      --amend statusim/nimbus-eth1:amd64-latest \
      #      --amend statusim/nimbus-eth1:arm64-latest
      #    docker manifest push statusim/nimbus-eth1:multiarch-latest
