# Nimbus
# Copyright (c) 2021-2025 Status Research & Development GmbH
# Licensed under either of
#  * Apache License, version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
#    http://www.apache.org/licenses/LICENSE-2.0)
#  * MIT license ([LICENSE-MIT](LICENSE-MIT) or
#    http://opensource.org/licenses/MIT)
# at your option. This file may not be copied, modified, or distributed except
# according to those terms.

name: Simulators
on:
  schedule:
    # every two days 11 PM
    - cron: "0 23 */2 * *"
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        target:
          - os: linux
            cpu: amd64
          - os: windows
            cpu: amd64
          - os: macos
            cpu: arm64
        include:
          - target:
              os: linux
            builder: ubuntu-22.04
          - target:
              os: macos
            builder: macos-13
          - target:
              os: windows
            builder: windows-latest

    defaults:
      run:
        shell: bash

    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize
        if: runner.os == 'linux'
        run: |
          sudo apt-get -q update

      - name: Get latest nimbus-build-system commit hash
        id: versions
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          nbsHash=$(getHash status-im/nimbus-build-system)
          echo "nimbus_build_system=$nbsHash" >> $GITHUB_OUTPUT

      - name: Restore llvm-mingw from cache
        if: runner.os == 'windows'
        id: windows-mingw-cache
        uses: actions/cache@v4
        with:
          path: external/mingw-amd64
          key: 'mingw-llvm-17-sim'

      - name: Install llvm-mingw dependency
        if: >
          steps.windows-mingw-cache.outputs.cache-hit != 'true' &&
          runner.os == 'windows'
        run: |
          mkdir -p external
          LLVM_VERSION="20250730"
          MINGW_BASE="https://github.com/mstorsjo/llvm-mingw/releases/download/$LLVM_VERSION"
          MINGW_URL="$MINGW_BASE/llvm-mingw-$LLVM_VERSION-ucrt-x86_64.zip"
          curl -L "$MINGW_URL" -o "external/mingw-amd64.zip"
          7z x -y "external/mingw-amd64.zip" -oexternal/mingw-amd64/
          mv external/mingw-amd64/**/* ./external/mingw-amd64

      - name: Path to cached dependencies
        if: runner.os == 'windows'
        run: |
          echo '${{ github.workspace }}'"/external/mingw-amd64/bin" >> $GITHUB_PATH

      - name: Restore prebuilt Nim from cache
        uses: actions/cache@v4
        with:
          path: NimBinaries
          key: 'nim-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.nimbus_build_system }}-sim'

      - name: Build Nim and deps
        run: |
          if [[ '${{ matrix.target.os }}' == 'windows' ]]; then
            ncpu=${NUMBER_OF_PROCESSORS}
          elif [[ '${{ matrix.target.os }}' == 'macos' ]]; then
            ncpu=$(sysctl -n hw.ncpu)
          else
            ncpu=$(nproc)
          fi
          make -j${ncpu} ARCH_OVERRIDE=x64 CI_CACHE=NimBinaries init
          make -j${ncpu} deps rocksdb

      - name: Run Simulators
        run: |
          SIM_SCRIPT="hive_integration/nodocker/build_sims.sh"
          bash ${SIM_SCRIPT} "${{ matrix.target.os }}-${{ matrix.target.cpu }}"

      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: '${{ matrix.target.os }}_${{ matrix.target.cpu }}_stat'
          path: ./simulators.md
          retention-days: 2

  prepare-stat:
    name: Test results
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Download artefacts
        uses: actions/download-artifact@v4

      - name: Create statistics notes
        run: |
          cat linux_amd64_stat/* > stat_notes.md
          cat macos_arm64_stat/* >> stat_notes.md
          cat windows_amd64_stat/* >> stat_notes.md

      - name: Delete tag
        uses: dev-drprasad/delete-tag-and-release@v1.0.1
        with:
          delete_release: true
          tag_name: sim-stat
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Simulators results
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          prerelease: true
          commit: master
          name: "Simulators results"
          tag: sim-stat
          bodyFile: "stat_notes.md"

      - name: Delete artefacts
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            linux_amd64_stat
            macos_arm64_stat
            windows_amd64_stat
