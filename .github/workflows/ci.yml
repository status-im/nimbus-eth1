# Nimbus
# Copyright (c) 2020-2025 Status Research & Development GmbH
# Licensed under either of
#  * Apache License, version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
#    http://www.apache.org/licenses/LICENSE-2.0)
#  * MIT license ([LICENSE-MIT](LICENSE-MIT) or
#    http://opensource.org/licenses/MIT)
# at your option. This file may not be copied, modified, or distributed except
# according to those terms.

name: Nimbus CI
on:
  push:
    paths-ignore:
      - 'doc/**'
      - 'docs/**'
      - '**/*.md'
      - '**/*.yml'
      - 'hive_integration/**'
      - 'portal/**'
      - '.github/workflows/portal*.yml'
      - 'nimbus_verified_proxy/**'
      - '.github/workflows/nimbus_verified_proxy.yml'
      - '.github/workflows/build_base_image.yml'
      - 'docker/**'

  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'docs/**'
      - '**/*.md'
      - '**/*.yml'
      - 'hive_integration/**'
      - 'portal/**'
      - '.github/workflows/portal*.yml'
      - 'nimbus_verified_proxy/**'
      - '.github/workflows/nimbus_verified_proxy.yml'
      - '.github/workflows/build_base_image.yml'
      - 'docker/**'

  workflow_dispatch:

jobs:
  matrix_config:
    uses: ./.github/workflows/matrix_config.yml

  build:
    needs: matrix_config

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    name: '${{ matrix.os }}-${{ matrix.cpu }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout nimbus-eth1
        uses: actions/checkout@v4

      - name: Derive environment variables
        run: |
          if [[ '${{ matrix.cpu }}' == 'amd64' ]]; then
            PLATFORM=x64
            GOARCH=amd64
          elif [[ '${{ matrix.cpu }}' == 'arm64' ]]; then
            PLATFORM=arm64
            GOARCH=arm64
          else
            PLATFORM=x86
            GOARCH=386
          fi
          echo "PLATFORM=${PLATFORM}" >> $GITHUB_ENV
          echo "GOARCH=${GOARCH}" >> $GITHUB_ENV

          ncpu=''
          case '${{ runner.os }}' in
          'Linux')
            ncpu=$(nproc)
            echo "Number of cores: ${ncpu}"
            echo "$(grep MemTotal /proc/meminfo)"
            echo -e "Partition sizes:\n$(df -k -h .)"
            ;;
          'macOS')
            ncpu=$(sysctl -n hw.ncpu)
            hwmemsize=$(sysctl -n hw.memsize)
            ramsize=$(expr $hwmemsize / $((1024**3)))
            echo "Number of cores: ${ncpu}"
            echo "Physical memory: ${ramsize} GB"
            echo -e "Partition sizes:\n$(df -k -h .)"
            ;;
          'Windows')
            ncpu=${NUMBER_OF_PROCESSORS}
            CD=${PWD:1:1}
            echo "Number of cores: ${NUMBER_OF_PROCESSORS}"
            echo "Physical memory: $(wmic ComputerSystem get TotalPhysicalMemory)"
            echo -e "Partition sizes:\n$(wmic logicaldisk get name,size,freespace | grep -e "${CD^}" -e "FreeSpace")"
            ;;
          esac
          [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
          echo "ncpu=${ncpu}" >> $GITHUB_ENV

      - name: Install build dependencies (Macos)
        # Some home brew modules were reported missing
        if: runner.os == 'Macos'
        run: |
          HOMEBREW_NO_INSTALL_CLEANUP=1 brew install gnu-getopt
          brew link --force gnu-getopt

      - name: Restore llvm-mingw (Windows) from cache
        if: runner.os == 'Windows'
        id: windows-mingw-cache
        uses: actions/cache@v4
        with:
          path: external/mingw-${{ matrix.cpu }}
          key: 'mingw-llvm-17-${{ matrix.cpu }}'

      - name: Install llvm-mingw dependency (Windows)
        if: >
          steps.windows-mingw-cache.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        run: |
          mkdir -p external
          LLVM_VERSION="20250730"
          MINGW_BASE="https://github.com/mstorsjo/llvm-mingw/releases/download/$LLVM_VERSION"
          if [[ '${{ matrix.cpu }}' == 'amd64' ]]; then
            MINGW_URL="$MINGW_BASE/llvm-mingw-$LLVM_VERSION-ucrt-x86_64.zip"
            ARCH=64
          else
            MINGW_URL="$MINGW_BASE/llvm-mingw-$LLVM_VERSION-ucrt-i686.zip"
            ARCH=32
          fi
          curl -L "$MINGW_URL" -o "external/mingw-${{ matrix.cpu }}.zip"
          7z x -y "external/mingw-${{ matrix.cpu }}.zip" -oexternal/mingw-${{ matrix.cpu }}/
          mv external/mingw-${{ matrix.cpu }}/**/* ./external/mingw-${{ matrix.cpu }}

      - name: Path to cached dependencies (Windows)
        if: >
          runner.os == 'Windows'
        run: |
          echo '${{ github.workspace }}'"/external/mingw-${{ matrix.cpu }}/bin" >> $GITHUB_PATH

      - name: Get latest nimbus-build-system commit hash
        id: versions
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          nbsHash=$(getHash status-im/nimbus-build-system)
          echo "nimbus_build_system=$nbsHash" >> $GITHUB_OUTPUT

      - name: Restore prebuilt Nim from cache
        id: nim-cache
        uses: actions/cache@v4
        with:
          path: NimBinCache
          key: 'nim-${{ matrix.os }}-${{ matrix.cpu }}-${{ steps.versions.outputs.nimbus_build_system }}'

      - name: Get latest nim-rocksdb commit hash
        id: rocksdb-versions
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          rocksHash=$(getHash status-im/nim-rocksdb)
          echo "nim_rocksdb=$rocksHash" >> $GITHUB_OUTPUT

      - name: Restore prebuilt rocksdb from cache
        id: rocksdb-cache
        uses: actions/cache@v4
        with:
          path: RocksBinCache
          key: 'rocks-${{ matrix.os }}-${{ matrix.cpu }}-${{ steps.rocksdb-versions.outputs.nim_rocksdb }}'

      - name: Build Nim and Nimbus-eth1 dependencies
        run: |
          make -j${ncpu} ARCH_OVERRIDE=${PLATFORM} CI_CACHE=NimBinCache init

      - name: Restore EEST test vectors from cache
        uses: actions/cache@v4
        with:
          path: tests/fixtures/eest
          # EEST release version contained in eest_ci_cache.sh.
          # Each time we bump EEST version, it should invalidate the cache too.
          key: eest-${{ hashFiles('scripts/eest_ci_cache.sh') }}
          
      - name: Run nimbus-eth1 tests (Windows)
        if: runner.os == 'Windows'
        run: |
          gcc --version
          DEFAULT_MAKE_FLAGS="-j${ncpu} ENABLE_VMLOWMEM=${ENABLE_VMLOWMEM} ROCKSDB_CI_CACHE=RocksBinCache"
          mingw32-make ${DEFAULT_MAKE_FLAGS} all test_import build_fuzzers
          build/nimbus_execution_client.exe --help
          # give us more space
          # find . -type d -name ".git" -exec rm -rf {} +
          find . -type d -name "nimcache" -exec rm -rf {} +
          mingw32-make ${DEFAULT_MAKE_FLAGS} test t8n_test

      - name: Run nimbus-eth1 tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"
          DEFAULT_MAKE_FLAGS="-j${ncpu} ROCKSDB_CI_CACHE=RocksBinCache"
          env CC=gcc make ${DEFAULT_MAKE_FLAGS} all test_import build_fuzzers
          build/nimbus_execution_client --help
          # CC, GOARCH, and CGO_ENABLED are needed to select correct compiler 32/64 bit
          # pushd vendor/nimbus-eth2
          # env NIMBUSEL_BINARY=../../build/nimbus_execution_client NIMBUSEL_GENESIS=scripts/nimbusel_genesis.json \
          # ./scripts/launch_local_testnet.sh --nodes=3 --stop-at-epoch=7 \
          # --disable-htop --reuse-binaries --run-nimbus-el --dl-eth2 --verbose --kill-old-processes
          # popd
          env CC=gcc GOARCH=${GOARCH} CXX=g++ CGO_ENABLED=1 make ${DEFAULT_MAKE_FLAGS} test t8n_test

      - name: Run nimbus-eth1 tests (Macos)
        if: runner.os == 'Macos'
        run: |
          export ZERO_AR_DATE=1 # avoid timestamps in binaries
          DEFAULT_MAKE_FLAGS="-j${ncpu} ROCKSDB_CI_CACHE=RocksBinCache"
          make ${DEFAULT_MAKE_FLAGS} all test_import build_fuzzers
          build/nimbus_execution_client --help
          # "-static" option will not work for osx unless static system libraries are provided
          # pushd vendor/nimbus-eth2
          # env NIMBUSEL_BINARY=../../build/nimbus_execution_client NIMBUSEL_GENESIS=scripts/nimbusel_genesis.json \
          # ./scripts/launch_local_testnet.sh --nodes=3 --stop-at-epoch=7 \
          # --disable-htop --reuse-binaries --run-nimbus-el --dl-eth2 --verbose --kill-old-processes
          # popd
          make ${DEFAULT_MAKE_FLAGS} test t8n_test

  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # In PR, has extra merge commit: ^1 = PR, ^2 = base

      - name: Check copyright year
        if: ${{ !cancelled() }} && github.event_name == 'pull_request'
        run: |
          bash scripts/check_copyright_year.sh
