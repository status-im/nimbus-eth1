# Nimbus - Portal Network
# Copyright (c) 2022 Status Research & Development GmbH
# Licensed and distributed under either of
#   * MIT license (license terms in the root directory or at https://opensource.org/licenses/MIT).
#   * Apache v2 license (license terms in the root directory or at https://www.apache.org/licenses/LICENSE-2.0).
# at your option. This file may not be copied, modified, or distributed except according to those terms.

{.used.}

import
  unittest2, stint, 
  stew/[byteutils, results], 
  eth/[common/eth_types, rlp],
  ../network/history/history_network

let bytes = ""

let rlpb = rlpFromHex(bytes)
var headerRlp = rlpb.listElem(0)
var bodyRlp = rlpb.listElem(1)
var receitsRlp = rlpb.listElem(2)

let blockHeader = headerRlp.read(BlockHeader)
let blockBody = bodyRlp.read(BlockBody)
let receipts = receitsRlp.read(seq[Receipt])

suite "History network content validation":
  test "Correct header should pass validation":
    let correctHeaderBytes = rlp.encode(blockHeader)
    
    let maybeHeader = validateHeaderBytes(correctHeaderBytes, blockHeader.blockHash())

    check:
      maybeHeader.isSome()

  test "Malformed header bytes should not pass validation":
    let correctHeaderBytes = rlp.encode(blockHeader)
    
    let malformedBytes = correctHeaderBytes[10..correctHeaderBytes.high]

    let maybeHeader = validateHeaderBytes(malformedBytes, blockHeader.blockHash())

    check:
      maybeHeader.isNone()

  test "Header different than expected should not pass validation":
    var modifiedHeader = blockHeader

    modifiedHeader.gasUsed = modifiedHeader.gasUsed + 1

    let differentHeaderBytes = rlp.encode(modifiedHeader)
  
    let maybeHeader = validateHeaderBytes(differentHeaderBytes, blockHeader.blockHash())

    check:
      maybeHeader.isNone()

  test "Correct block body should pass validation":
    let correctBodyBytes = rlp.encode(blockBody)

    let maybeBody = validateBodyBytes(correctBodyBytes, blockHeader.txRoot, blockHeader.ommersHash)

    check:
      maybeBody.isSome()

  test "Malformed block body bytes should fail validation":
    let correctBodyBytes = rlp.encode(blockBody)

    let malformedBytes = correctBodyBytes[10..correctBodyBytes.high]

    let maybeBody = validateBodyBytes(malformedBytes, blockHeader.txRoot, blockHeader.ommersHash)

    check:
      maybeBody.isNone()

  test "Block body with modified transactions list should not pass validation":
    var modifiedBody = blockBody

    # drop first transaction
    let modifiedTransactionList = blockBody.transactions[1..blockBody.transactions.high]

    modifiedBody.transactions = modifiedTransactionList

    let modifiedBodyBytes = rlp.encode(modifiedBody)

    let maybeBody = validateBodyBytes(modifiedBodyBytes, blockHeader.txRoot, blockHeader.ommersHash)

    check:
      maybeBody.isNone()

  test "Block body with modified uncles list should not pass validation":
    var modifiedBody = blockBody

    modifiedBody.uncles = @[]

    let modifiedBodyBytes = rlp.encode(modifiedBody)

    let maybeBody = validateBodyBytes(modifiedBodyBytes, blockHeader.txRoot, blockHeader.ommersHash)

    check:
      maybeBody.isNone()

  test "Correct receipts should pass validation":
    let correctReceiptsBytes = rlp.encode(receipts)

    let maybeReceips = validateReceiptsBytes(correctReceiptsBytes, blockHeader.receiptRoot)

    check:
      maybeReceips.isSome()

  test "Malformed receipts bytes should fail validation":
    let correctReceiptsBytes = rlp.encode(receipts)

    let malformedBytes = correctReceiptsBytes[10..correctReceiptsBytes.high]

    let maybeReceips = validateReceiptsBytes(malformedBytes, blockHeader.receiptRoot)

    check:
      maybeReceips.isNone()

  test "Modified receipts list should not pass validation":
    var modifiedReceipts = receipts[1..receipts.high]

    let modifiedReceiptsBytes = rlp.encode(modifiedReceipts)

    let maybeReceips = validateReceiptsBytes(modifiedReceiptsBytes, blockHeader.receiptRoot)

    check:
      maybeReceips.isNone()
