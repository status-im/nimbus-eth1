# Fluffy
# Copyright (c) 2025 Status Research & Development GmbH
# Licensed and distributed under either of
#   * MIT license (license terms in the root directory or at https://opensource.org/licenses/MIT).
#   * Apache v2 license (license terms in the root directory or at https://www.apache.org/licenses/LICENSE-2.0).
# at your option. This file may not be copied, modified, or distributed except according to those terms.

{.used.}

import
  std/[tables, sets],
  stew/byteutils,
  unittest2,
  ../../evm/async_evm,
  ./async_evm_test_backend

func hexToUInt256(s: string): UInt256 =
  UInt256.fromBytesBE(s.hexToSeqByte())

type
  TestAddress = string
  TestStorage = Table[string, string]
  TestStorageKeys = HashSet[string]

  TestAccount =
    tuple[balance: string, nonce: string, code: string, storage: TestStorage]

  TestTxArgs = tuple[to: string, input: string]

  TestResult = tuple[output: string, accessList: Table[TestAddress, TestStorageKeys]]

  TestCase =
    tuple[
      preState: Table[TestAddress, TestAccount],
      blockNumber: string,
      txArgs: TestTxArgs,
      expected: TestResult,
    ]

const
  emptyStorage = default(Table[string, string])
  emptyStorageKeys = default(HashSet[string])

const testCases: seq[TestCase] =
  @[
    # Test state from mainnet contract 0x1a875Da9e86506999A2931400475C34c27185Dd1 at block 700_000
    (
      preState: {
        "0x1a875da9e86506999a2931400475c34c27185dd1": (
          balance: "0x",
          nonce: "0x",
          code:
            "0x3660008037602060003660003473273930d21e01ee25e4c219b63259d214872220a261235a5a03f21560015760206000f3",
          storage: emptyStorage,
        ),
        "0x273930d21e01ee25e4c219b63259d214872220a2": (
          balance: "0x",
          nonce: "0x",
          code:
            "0x606060405236156100da5760e060020a6000350463173825d9811461012c5780632f54bf6e146101875780634123cb6b146101af57806352375093146101b857806354fd4d50146101c25780635c52c2f5146101cc578063659010e7146101fd5780637065cb4814610207578063746c91711461023b578063797af62714610244578063b20d30a914610257578063b61d27f61461028b578063b75c7dc6146102ac578063ba51a6df146102db578063c2cf73261461030f578063cbf0b0c01461034d578063f00d4b5d14610381578063f1736d86146103ba575b6103c4600034111561012a5760408051600160a060020a033216815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15b565b6103c46004356000600036436040518084848082843750505090910190815260405190819003602001902090506106c9815b600160a060020a03321660009081526101026020526040812054818082811415610c3f57610d97565b6103c66004355b600160a060020a03811660009081526101026020526040812054115b919050565b6103c660015481565b6103c66101075481565b6103c66101085481565b6103c46000364360405180848480828437505050909101908152604051908190036020019020905061081a8161015e565b6103c66101065481565b6103c4600435600036436040518084848082843750505090910190815260405190819003602001902090506106418161015e565b6103c660005481565b6103c66004355b600081610a7d8161015e565b6103c46004356000364360405180848480828437505050909101908152604051908190036020019020905061080e8161015e565b6103c66004803590602480359160443591820191013560006108393261018e565b6103c4600435600160a060020a033216600090815261010260205260408120549080828114156103d857610457565b6103c4600435600036436040518084848082843750505090910190815260405190819003602001902090506107888161015e565b6103c6600435602435600082815261010360209081526040808320600160a060020a038516845261010290925282205482818114156107e157610805565b6103c4600435600036436040518084848082843750505090910190815260405190819003602001902090506108288161015e565b6103c46004356024356000600036436040518084848082843750505090910190815260405190819003602001902090506104e28161015e565b6103c66101055481565b005b60408051918252519081900360200190f35b50506000828152610103602052604081206001810154600284900a9290831611156104575780546001828101805492909101835590839003905560408051600160a060020a03321681526020810186905281517fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b929181900390910190a15b50505050565b600160a060020a03831660028361010081101561000257508301819055600160a060020a03851660008181526101026020908152604080832083905584835291829020869055815192835282019290925281517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c929181900390910190a1505b505050565b15610457576104f08361018e565b156104fb57506104dd565b600160a060020a03841660009081526101026020526040812054925082141561052457506104dd565b61045d5b6101045460005b81811015610ee457610104805461010991600091849081101561000257600080516020610f9f83398151915201548252506020918252604081208054600160a060020a0319168155600181018290556002810180548382559083528383209193610f6992601f9290920104810190610a65565b60018054810190819055600160a060020a038316906002906101008110156100025790900160005081905550600160005054610102600050600084600160a060020a03168152602001908152602001600020600050819055507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3826040518082600160a060020a0316815260200191505060405180910390a15b505b50565b1561063c5761064f8261018e565b1561065a575061063e565b610662610528565b60015460fa90106106775761067561068c565b505b60015460fa90106105a2575061063e565b6107465b600060015b600154811015610a79575b600154811080156106bc5750600281610100811015610002570154600014155b15610d9f5760010161069c565b156104dd57600160a060020a0383166000908152610102602052604081205492508214156106f7575061063c565b6001600160005054036000600050541115610712575061063c565b600060028361010081101561000257508301819055600160a060020a03841681526101026020526040812055610688610528565b5060408051600160a060020a038516815290517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9181900360200190a1505050565b1561063c5760015482111561079d575061063e565b60008290556107aa610528565b6040805183815290517facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da9181900360200190a15050565b506001820154600282900a908116600014156108005760009350610805565b600193505b50505092915050565b1561063c575061010555565b1561063e5760006101065550565b1561063c5781600160a060020a0316ff5b15610a555761084d846000610e793261018e565b15610909577f92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd00432858786866040518086600160a060020a0316815260200185815260200184600160a060020a031681526020018060200182810382528484828181526020019250808284378201915050965050505050505060405180910390a184600160a060020a03168484846040518083838082843750505090810191506000908083038185876185025a03f15060009350610a5592505050565b6000364360405180848480828437505050909101908152604051908190036020019020915061093990508161024b565b15801561095c575060008181526101096020526040812054600160a060020a0316145b15610a555760008181526101096020908152604082208054600160a060020a03191688178155600181018790556002018054858255818452928290209092601f01919091048101908490868215610a5d579182015b82811115610a5d5782358260005055916020019190600101906109b1565b50507f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328132868887876040518087815260200186600160a060020a0316815260200185815260200184600160a060020a03168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a15b949350505050565b506109cf9291505b80821115610a795760008155600101610a65565b5090565b15610c2c5760008381526101096020526040812054600160a060020a031614610c2c5760408051600091909120805460018201546002929092018054600160a060020a0392909216939091819083908015610afd57820191906000526020600020905b815481529060010190602001808311610ae057829003601f168201915b505091505060006040518083038185876185025a03f150505060008481526101096020908152604080519281902080546001820154600160a060020a033281811688529587018b905293860181905292166060850181905260a06080860181815260029390930180549187018290527fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a975094958a959293909160c083019084908015610bcf57820191906000526020600020905b815481529060010190602001808311610bb257829003601f168201915b5050965050505050505060405180910390a160008381526101096020908152604082208054600160a060020a031916815560018101839055600281018054848255908452828420919392610c3292601f9290920104810190610a65565b50919050565b50505060019150506101aa565b60008581526101036020526040812080549093501415610cc7576000805483556001838101919091556101048054918201808255828015829011610c9657818360005260206000209182019101610c969190610a65565b50505060028301819055610104805487929081101561000257600091909152600080516020610f9f83398151915201555b506001810154600283900a90811660001415610d975760408051600160a060020a03321681526020810187905281517fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda929181900390910190a1815460019011610d84576000858152610103602052604090206002015461010480549091908110156100025760406000908120600080516020610f9f8339815191529290920181905580825560018083018290556002909201559450610d979050565b8154600019018255600182018054821790555b505050919050565b5b60018054118015610dc257506001546002906101008110156100025701546000145b15610dd65760018054600019019055610da0565b60015481108015610df95750600154600290610100811015610002570154600014155b8015610e1357506002816101008110156100025701546000145b15610e7457600154600290610100811015610002578101549082610100811015610002578101919091558190610102906000908361010081101561000257810154825260209290925260408120929092556001546101008110156100025701555b610691565b156101aa5761010754610e8f5b62015180420490565b1115610ea857600061010655610ea3610e86565b610107555b6101065480830110801590610ec65750610106546101055490830111155b15610edc575061010680548201905560016101aa565b5060006101aa565b61063c6101045460005b81811015610f745761010480548290811015610002576000918252600080516020610f9f833981519152015414610f6157610104805461010391600091849081101561000257600080516020610f9f83398151915201548252506020919091526040812081815560018101829055600201555b600101610eee565b50505060010161052f565b61010480546000808355919091526104dd90600080516020610f9f83398151915290810190610a6556004c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe",
          storage: emptyStorage,
        ),
      }.toTable,
      blockNumber: "0x0AAE60",
      txArgs: (to: "0x1a875da9e86506999a2931400475c34c27185dd1", input: "0x"),
      expected: (
        output: "0x0000000000000000000000000000000000000000000000000000000000000000",
        accessList: {
          "0x1a875da9e86506999a2931400475c34c27185dd1": emptyStorageKeys,
          "0x273930d21e01ee25e4c219b63259d214872220a2": emptyStorageKeys,
        }.toTable,
      ),
    ),
    # Test state from mainnet contract 0x6e38a457c722c6011b2dfa06d49240e797844d66 at block 1_000_000
    (
      preState: {
        "0x6e38a457c722c6011b2dfa06d49240e797844d66": (
          balance: "0x",
          nonce: "0x",
          code:
            "0x60606040526000357c0100000000000000000000000000000000000000000000000000000000900480636bd5084a1461004f578063a888c2cd14610070578063f3fe12c9146100ff5761004d565b005b61005a600450610395565b6040518082815260200191505060405180910390f35b610081600480359060200150610151565b604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018060200183815260200182810382528481815481526020019150805480156100ee57820191906000526020600020905b8154815290600101906020018083116100d157829003601f168201915b505094505050505060405180910390f35b61014f6004803590602001906004018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090506101af565b005b60006000508181548110156100025790600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101600050908060020160005054905083565b600060006000505490506000600050805480919060010190908154818355818115116102885760030281600302836000526020600020918201910161028791906101f4565b808211156102835760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600050805460008255601f01602090049060005260206000209081019061026e9190610250565b8082111561026a5760008181506000905550600101610250565b5090565b506002820160005060009055506001016101f4565b5090565b5b5050505060206040519081016040528033815260200183815260200143815260200150600060005082815481101561000257906000526020600020906003020160005060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550602082015181600101600050908051906020019082805482825590600052602060002090601f01602090048101928215610353579182015b82811115610352578251826000505591602001919060010190610334565b5b50905061037e9190610360565b8082111561037a5760008181506000905550600101610360565b5090565b5050604082015181600201600050559050505b5050565b600060006000505490506103a4565b9056",
          storage: {
            "0x80f0598597d7a1012e2e0a89cab2b766e02a3a5e30768662751fe258f5389667":
              "0x536174697366792056616c756573207468726f75676820467269656e64736869",
            "0x80f0598597d7a1012e2e0a89cab2b766e02a3a5e30768662751fe258f5389668":
              "0x7020616e6420506f6e6965732100000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000":
              "0x0000000000000000000000000000000000000000000000000000000000000015",
            "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e578":
              "0x000000000000000000000000fb7bc66a002762e28545ea0a7fc970d381863c42",
            "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e57a":
              "0x000000000000000000000000000000000000000000000000000000000000c5df",
            "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e579":
              "0x000000000000000000000000000000000000000000000000000000000000002d",
          }.toTable,
        )
      }.toTable,
      blockNumber: "0x0F4240",
      txArgs: (
        to: "0x6e38a457c722c6011b2dfa06d49240e797844d66",
        input:
          "0xa888c2cd0000000000000000000000000000000000000000000000000000000000000007",
      ),
      expected: (
        output:
          "0x000000000000000000000000fb7bc66a002762e28545ea0a7fc970d381863c420000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000c5df000000000000000000000000000000000000000000000000000000000000002d536174697366792056616c756573207468726f75676820467269656e647368697020616e6420506f6e6965732100000000000000000000000000000000000000",
        accessList: {
          "0x6e38a457c722c6011b2dfa06d49240e797844d66": [
            "0x80f0598597d7a1012e2e0a89cab2b766e02a3a5e30768662751fe258f5389667",
            "0x80f0598597d7a1012e2e0a89cab2b766e02a3a5e30768662751fe258f5389668",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e578",
            "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e57a",
            "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e579",
          ].toHashSet
        }.toTable,
      ),
    ),
  ]

proc setupTestEvmState(testCase: TestCase): TestEvmState =
  let testState = TestEvmState.init()

  for adr, acc in testCase.preState:
    let
      address = Address.fromHex(adr)
      account = Account.init(
        acc.nonce.hexToUInt256().truncate(AccountNonce), acc.balance.hexToUInt256()
      )
    testState.setAccount(address, account)
    testState.setCode(address, acc.code.hexToSeqByte())

    for k, v in acc.storage:
      testState.setStorage(address, k.hexToUInt256(), v.hexToUInt256())

  return testState

suite "Async EVM":
  test "Call contract - optimistic state fetch enabled":
    for testCase in testCases:
      let
        testState = setupTestEvmState(testCase)
        evm = AsyncEvm.init(testState.toAsyncEvmStateBackend())
        header = Header(
          number: testCase.blockNumber.hexToUInt256().truncate(uint64),
          gasLimit: EVM_CALL_GAS_CAP,
        )
        tx = TransactionArgs(
          to: Opt.some(Address.fromHex(testCase.txArgs.to)),
          input: Opt.some(testCase.txArgs.input.hexToSeqByte()),
        )

      let callResult =
        (waitFor evm.call(header, tx, optimisticStateFetch = true)).expect("success")
      check callResult.output == testCase.expected.output.hexToSeqByte()

  test "Call contract - optimistic state fetch disabled":
    for testCase in testCases:
      let
        testState = setupTestEvmState(testCase)
        evm = AsyncEvm.init(testState.toAsyncEvmStateBackend())
        header = Header(
          number: testCase.blockNumber.hexToUInt256().truncate(uint64),
          gasLimit: EVM_CALL_GAS_CAP,
        )
        tx = TransactionArgs(
          to: Opt.some(Address.fromHex(testCase.txArgs.to)),
          input: Opt.some(testCase.txArgs.input.hexToSeqByte()),
        )

      let callResult =
        (waitFor evm.call(header, tx, optimisticStateFetch = false)).expect("success")
      check callResult.output == testCase.expected.output.hexToSeqByte()

  test "Create access list - optimistic state fetch enabled":
    for testCase in testCases:
      let
        testState = setupTestEvmState(testCase)
        evm = AsyncEvm.init(testState.toAsyncEvmStateBackend())
        header = Header(
          number: testCase.blockNumber.hexToUInt256().truncate(uint64),
          gasLimit: EVM_CALL_GAS_CAP,
        )
        tx = TransactionArgs(
          to: Opt.some(Address.fromHex(testCase.txArgs.to)),
          input: Opt.some(testCase.txArgs.input.hexToSeqByte()),
        )

      let (accessList, error, gasUsed) = (
        waitFor evm.createAccessList(header, tx, optimisticStateFetch = true)
      ).expect("success")

      check:
        accessList.len() == testCase.expected.accessList.len()
        gasUsed > 0
        error.isNone()

      for accessPair in accessList:
        let
          adr = accessPair.address.to0xHex()
          storageKeys = testCase.expected.accessList.getOrDefault(adr)

        check:
          testCase.expected.accessList.contains(adr)
          accessPair.storageKeys.len() == storageKeys.len()

        for k in accessPair.storageKeys:
          check storageKeys.contains(k.to0xHex())

  test "Create access list - optimistic state fetch disabled":
    for testCase in testCases:
      let
        testState = setupTestEvmState(testCase)
        evm = AsyncEvm.init(testState.toAsyncEvmStateBackend())
        header = Header(
          number: testCase.blockNumber.hexToUInt256().truncate(uint64),
          gasLimit: EVM_CALL_GAS_CAP,
        )
        tx = TransactionArgs(
          to: Opt.some(Address.fromHex(testCase.txArgs.to)),
          input: Opt.some(testCase.txArgs.input.hexToSeqByte()),
        )

      let (accessList, error, gasUsed) = (
        waitFor evm.createAccessList(header, tx, optimisticStateFetch = false)
      ).expect("success")

      check:
        accessList.len() == testCase.expected.accessList.len()
        gasUsed > 0
        error.isNone()

      for accessPair in accessList:
        let
          adr = accessPair.address.to0xHex()
          storageKeys = testCase.expected.accessList.getOrDefault(adr)

        check:
          testCase.expected.accessList.contains(adr)
          accessPair.storageKeys.len() == storageKeys.len()

        for k in accessPair.storageKeys:
          check storageKeys.contains(k.to0xHex())

  test "Estimate Gas - optimistic state fetch enabled":
    for testCase in testCases:
      let
        testState = setupTestEvmState(testCase)
        evm = AsyncEvm.init(testState.toAsyncEvmStateBackend())
        header = Header(
          number: testCase.blockNumber.hexToUInt256().truncate(uint64),
          gasLimit: EVM_CALL_GAS_CAP,
        )
        tx = TransactionArgs(
          to: Opt.some(Address.fromHex(testCase.txArgs.to)),
          input: Opt.some(testCase.txArgs.input.hexToSeqByte()),
        )

      let gasEstimate = (
        waitFor evm.estimateGas(header, tx, optimisticStateFetch = true)
      ).expect("success")
      check gasEstimate > 0

  test "Estimate Gas - optimistic state fetch disabled":
    for testCase in testCases:
      let
        testState = setupTestEvmState(testCase)
        evm = AsyncEvm.init(testState.toAsyncEvmStateBackend())
        header = Header(
          number: testCase.blockNumber.hexToUInt256().truncate(uint64),
          gasLimit: EVM_CALL_GAS_CAP,
        )
        tx = TransactionArgs(
          to: Opt.some(Address.fromHex(testCase.txArgs.to)),
          input: Opt.some(testCase.txArgs.input.hexToSeqByte()),
        )

      let gasEstimate = (
        waitFor evm.estimateGas(header, tx, optimisticStateFetch = false)
      ).expect("success")
      check gasEstimate > 0
